name: Build and Test

on:
  push:
    branches: [ main, dev ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Test job - runs on all platforms
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev \
          build-essential \
          curl \
          wget \
          libssl-dev \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose --workspace
      working-directory: agent

    - name: Run clippy
      run: cargo clippy -- -D warnings
      working-directory: agent

    - name: Check formatting
      run: cargo fmt -- --check
      working-directory: agent

  # Build job - creates release artifacts
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test
    if: startsWith(github.ref, 'refs/tags/')

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: health-checker-linux-amd64
            asset_extension: .tar.gz

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: health-checker-windows-amd64
            asset_extension: .zip

          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: health-checker-macos-amd64
            asset_extension: .tar.gz

          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: health-checker-macos-arm64
            asset_extension: .tar.gz

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: ${{ matrix.target }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev \
          build-essential \
          curl \
          wget \
          libssl-dev \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev

    - name: Install frontend dependencies
      run: npm ci
      working-directory: ui

    - name: Build frontend
      run: npm run build
      working-directory: ui

    - name: Install Tauri CLI
      run: npm install -g @tauri-apps/cli

    - name: Build Tauri app
      run: npm run tauri build -- --target ${{ matrix.target }}
      working-directory: ui

    - name: Package (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../${{ matrix.artifact_name }}${{ matrix.asset_extension }} health-checker
        cd ../../..

    - name: Package (Windows)
      if: runner.os == 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.artifact_name }}${{ matrix.asset_extension }} health-checker.exe
        cd ../../..

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}${{ matrix.asset_extension }}

  # Release job - creates GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## Health & Speed Checker ${{ github.ref_name }}

          ### What's New
          - See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)

          ### Installation

          #### Windows
          1. Download `health-checker-windows-amd64.zip`
          2. Extract the archive
          3. Run `health-checker.exe`

          #### macOS
          1. Download the appropriate file for your architecture:
             - Intel: `health-checker-macos-amd64.tar.gz`
             - Apple Silicon: `health-checker-macos-arm64.tar.gz`
          2. Extract: `tar xzf health-checker-*.tar.gz`
          3. Run: `./health-checker`

          #### Linux
          1. Download `health-checker-linux-amd64.tar.gz`
          2. Extract: `tar xzf health-checker-linux-amd64.tar.gz`
          3. Run: `./health-checker`

    - name: Upload Release Assets
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');

          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: context.ref.replace('refs/tags/', '')
          });

          const artifacts = [
            'health-checker-linux-amd64.tar.gz',
            'health-checker-windows-amd64.zip',
            'health-checker-macos-amd64.tar.gz',
            'health-checker-macos-arm64.tar.gz'
          ];

          for (const artifact of artifacts) {
            const artifactPath = path.join(process.env.GITHUB_WORKSPACE, artifact.replace(/\.(tar\.gz|zip)$/, ''), artifact);

            if (fs.existsSync(artifactPath)) {
              console.log(`Uploading ${artifact}...`);

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                name: artifact,
                data: fs.readFileSync(artifactPath)
              });
            }
          }

  # Security audit
  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run cargo audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
